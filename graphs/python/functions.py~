#functions

import ntpath
# -------- parsing in --------------


#------ gcm ------------
def parse_in_gcm(filepath, gcm_x,gcm_y, gcm_z):
	float_list = []
	word_list = []
	file = open(filepath)
	for line in file:
		word_list = line.split()
		if len(word_list) > 0:
			if word_list[0] == "gcm:":
				for word in word_list[1:]:
					a = float(word)
					float_list.append(a)
				gcm_x.append(float_list[0])
        	    		gcm_y.append(float_list[1])
        	    		gcm_z.append(float_list[2])
        			float_list = []
	file.close()

# -------------- H ------------

def parse_in_H(filepath, H_x,H_y, H_z):
	float_list = []
	word_list = []
	file = open(filepath)
	for line in file:
		word_list = line.split()
		if len(word_list) > 0:
			if word_list[0] == "H:":
				for word in word_list[1:]:
					a = float(word)
					float_list.append(a)
				H_x.append(float_list[0])
        	    		H_y.append(float_list[1])
        	    		H_z.append(float_list[2])
        	    		float_list = []
	file.close()
# --- L -------------------
def parse_in_L(filepath, L_x,L_y, L_z):
	float_list = []
	word_list = []
	file = open(filepath)
	for line in file:
		word_list = line.split()
		if len(word_list) > 0:
			if word_list[0] == "L:":
				for word in word_list[1:]:
					a = float(word)
					float_list.append(a)
				L_x.append(float_list[0])
        	    		L_y.append(float_list[1])
        	    		L_z.append(float_list[2])
        	    		float_list = []
	file.close()


# -------------- phases -----------
def parse_in_phases(filepath,phases):
	file = open(filepath)
	for line in file:
		word_list = line.split()
		if len(word_list) > 0:
			if word_list[0] == "right":
				phases.append("right")
			if word_list[0] == "left":
				phases.append("left")
			if word_list[0] == "none":
				phases.append("none")
	file.close()




# -------------------- plotting ------------------------------

# --- gcm ---------
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def plot_gcm(filename,numOfFiles,gcm_x,gcm_y,gcm_z):

	fig1 = plt.figure('gcm overlay')
	ax1 = fig1.gca(projection='3d')
	ax1.set_xlabel('Z')
	ax1.set_ylabel('X')
	ax1.set_zlabel('Y')
	
	for i in numOfFiles:
		ax1.scatter(gcm_z[i][0],gcm_x[i][0], gcm_y[i][0], color='red') #beginning
		ax1.scatter(gcm_z[i][len(gcm_z[i]) -1], gcm_x[i][len(gcm_x[i]) -1],gcm_y[i][len(gcm_y[i])-1])#end
	    	labelname = 'gcm ' + filename[i]
		ax1.plot(gcm_z[i],gcm_x[i],gcm_y[i],label = labelname)
		ax1.legend(prop = {'size' : 'xx-small'})
	picturename = 'gcm_overlay_plot.eps'
	#plt.savefig(picturename, dpi=900)


def plot_magH(filename, numOfFiles, frames, mag):
	fig3 = plt.figure('|H| overlay', figsize=(23,4))
	ax3 = fig3.add_subplot(111)
	ax3.set_xlabel('frames')
	ax3.set_ylabel('|H|')
	for i in numOfFiles:
		labelname = '|H| ' + filename[i]
		ax3.plot(frames[i], mag[i], label = labelname)
		ax3.legend(prop = {'size' : 'xx-small'})

	#ax3.set_xlim([0,len(frames[0])])

	picturename = 'filt_|H|_overlay_plot.eps'
	#plt.savefig(picturename, dpi=900)

#----------------normalized density ------------

import numpy as np
from scipy.stats import gaussian_kde

def plot_norm_dens(filename, numOfFiles, mag):
	
	fig4 = plt.figure('density overlay')
	ax4 = fig4.add_subplot(111)
	ax4.set_xlabel('|H|')
	ax4.set_ylabel('density')

	for j in numOfFiles:
		normalized_mag = [i/max(mag[j]) for i in mag[j]]
		density = gaussian_kde(normalized_mag)
		xs = np.linspace(-1,1,200)
		density.covariance_factor = lambda: .25
		density._compute_covariance()
	
		ax4.hist(normalized_mag, bins=8, normed=True)
 		labelname = 'normalized |H| ' + filename[j]
		ax4.plot(xs, density(xs), label = labelname)
		ax4.legend(prop ={'size' : 'xx-small'})


	picturename ='|H|_normalized_density_overlay.eps'
	#plt.savefig(picturename, dpi=900)


# -------------- H and L -----------------
def plot_H_L(filename, numOfFiles, H_x,H_y,H_z,mag,L_x,L_y,L_z,frames):
	fig1, axarr = plt.subplots(4,sharex=True, sharey=True)

	for j in numOfFiles:
		labelname1 = 'H_x ' + filename[j]
		labelname2 = 'L_x ' + filename[j]
		labelname3 = 'H_y ' + filename[j]
		labelname4 = 'L_y ' + filename[j]
		labelname5 = 'H_z ' + filename[j]
		labelname6 = 'L_z ' + filename[j]
		labelname7 = '|H| ' + filename[j]
		
		axarr[0].plot(frames[j],H_x[j], label = labelname1)
		#axarr[0].plot(frames[j], L_x[j], label = labelname2)
		
		axarr[1].plot(frames[j],H_y[j], label = labelname3)
		#axarr[1].plot(frames[j], L_y[j], label = labelname4)	
		
		axarr[2].plot(frames[j],H_z[j], label = labelname5)
		#axarr[2].plot(frames[j], L_z[j], label = labelname6)	

		axarr[3].plot(frames[j], mag[j], label = labelname7)


		axarr[0].legend( loc = 'best', prop = {'size' : 'xx-small'})
		axarr[1].legend(loc = 'best', prop = {'size' : 'xx-small'})
		axarr[2].legend( loc = 'best', prop = {'size' : 'xx-small'})
		axarr[3].legend( loc = 'best', prop = {'size' : 'xx-small'})	
			
	
		axarr[0].set_xlim([0,len(frames[0])])
		axarr[1].set_xlim([0,len(frames[0])])
		axarr[2].set_xlim([0,len(frames[0])])
		axarr[3].set_xlim([0,len(frames[0])])
	

	axarr[3].set_xlabel('frames')

	#plt.xticks(range(0,len(mag[0]),20))

	picturename = 'H_combo_overlay.eps'
	#plt.savefig(picturename, dpi=900)


# ---------- H and L gait cycles ------------------

def plot_gait_H_L(filename, numOfFiles,H_x,H_y,H_z,mag,L_x,L_y,L_z,breaks):
	fig1, axarr = plt.subplots(4,sharex=True, sharey=True)

	for j in numOfFiles:
		t = breaks[1]
		labelname1 = 'H_x ' + filename[j]
		labelname2 = 'L_x ' + filename[j]
		labelname3 = 'H_y ' + filename[j]
		labelname4 = 'L_y ' + filename[j]
		labelname5 = 'H_z ' + filename[j]
		labelname6 = 'L_z ' + filename[j]
		labelname7 = '|H| ' + filename[j]
		for k in breaks[1::4]:
			
			a, = axarr[0].plot(range(0,(k-t)),H_x[j][t:k], label = labelname1)
			b, = axarr[0].plot(range(0,(k-t)), L_x[j][t:k], label = labelname2)

			c, = axarr[1].plot(range(0,(k-t)),H_y[j][t:k], label = labelname3)
			d, = axarr[1].plot(range(0,(k-t)), L_y[j][t:k], label = labelname4)	
		
			e, = axarr[2].plot(range(0,(k-t)),H_z[j][t:k], label = labelname5)
			f, = axarr[2].plot(range(0,(k-t)), L_z[j][t:k], label = labelname6)	

			g, = axarr[3].plot(range(0,(k-t)), mag[j][t:k], label = labelname7)

			t = k

		axarr[0].legend([a,b], [labelname1, labelname2], loc = 'best', prop = {'size' : 'xx-small'})
		axarr[1].legend([c,d], [labelname3, labelname4], loc = 'best', prop = {'size' : 'xx-small'})
		axarr[2].legend([e,f], [labelname5, labelname6], loc = 'best', prop = {'size' : 'xx-small'})
		axarr[3].legend([g], [labelname7], loc = 'best', prop = {'size' : 'xx-small'})	


	axarr[3].set_xlabel('frames')

	#plt.xticks(range(0,len(mag[0]),20))

	picturename = 'H_combo_gait_overlay.eps'
	#plt.savefig(picturename, dpi=900)
# ------------ phases --------------------


def filter_phases(numOfFiles,phases,filt_phases):
	for i in numOfFiles:
		filt_phases[i].append(phases[i][0])
		filt_phases[i].append(phases[i][1])
		for j in range(2,len(phases[i])):
			r = 0
			l = 0
			n = 0
			if phases[i][j-2] == "right":
				r += 1
			elif phases[i][j-2] == "left":
				l += 1
			elif phases[i][j-2] == "none":
				n += 1
			if phases[i][j-1] == "right":
				r += 1
			elif phases[i][j-1] == "left":
				l += 1
			elif phases[i][j-1] == "none":
				n += 1
			if phases[i][j] == "right":
				r += 1
			elif phases[i][j] == "left":
				l += 1
			elif phases[i][j] == "none":
				n += 1
			if n >= l and n >= r:
				filt_phases[i].append("none")
			elif l > n and l > r:
				filt_phases[i].append("left")
			elif r > n and r > l:
				filt_phases[i].append("right")


# -- breaks ---------

def breaks(numOfFiles,filt_phases,breaks):
	for i in numOfFiles:
		breaks.append(0)
		for j in range(0,len(filt_phases[i]) - 1):
			if filt_phases[i][j] != filt_phases[i][j+1]:
				breaks.append(j)
	
